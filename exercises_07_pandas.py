# -*- coding: utf-8 -*-
"""Exercises_07_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bkxf1uIB0jhtok69K4OLxvvlP9h0Nce3

#Exercises with Pandas
"""

import pandas as pd # import pandas
import numpy as np # import numpy

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab\ Notebooks/

df_sch= pd.read_csv('CASchools.csv')
df_sch.head()

"""**NOTE: Use the commands that we have seen in class up to now.**

Dataset: California Test Score Data. **CASchools.csv**
This dataset contains data on test performance, school characteristics and student demographic backgrounds for school districts in California.
The data used here are from all 420 K-6 and K-8 districts in California with data available for 1998 and 1999. Test scores are on the Stanford 9 standardized test administered to 5th grade students. School characteristics (averaged across the district) include enrollment, number of teachers (measured as “full-time equivalents”, number of computers per classroom, and expenditures per student. Demographic variables for the students are averaged across the district. The demographic variables include the percentage of students in the public assistance program CalWorks (formerly AFDC), the percentage of students that qualify for a reduced price lunch, and the percentage of students that are English learners (that is, students for whom English is a second language).
It contains several variables:

- District: character. District code.
- School: character. School name.
- County: factor indicating county.
- Grades: factor indicating grade span of district.
- Students: Total enrollment.
- Teachers: Number of teachers.
- Calworks: Percent qualifying for CalWorks (income assistance).
- Lunch: Percent qualifying for reduced-price lunch.
- Computer: Number of computers.
- Expenditure: Expenditure per student.
- Income: District average income (in USD 1,000).
- English: Percent of English learners.
- Read: Average reading score.
- Math: Average math score.

1. Load the CASchools.csv in a DataFrame. Remove the variable rownames from the loaded DataFrame.
"""

df_sch= pd.read_csv('CASchools.csv')
df_sch = df_sch.drop(columns=["rownames"])
df_sch

"""2.  Create a new column called `scores` as `(math+read)/2`.

"""

df_sch["scores"] = (df_sch["math"]+ df_sch["read"])/2
df_sch

"""3. How many NaNs does the dataframe have?"""

count_nan = df_sch.isna().sum().sum()
print(f"The number of NaN is: {count_nan}")

"""4. Delete the rows containing the NaNs. How many schools are there after deleting the NaNs?"""

df_noNAN = df_sch.dropna()
print(len(df_noNAN))

"""5. How many different counties are there in the DataFrame?"""

counties = df_sch["county"].nunique()
print(counties)

"""6. What is the score of the school with the highest number of students? What is the name of the school?"""

max_students_name = df_sch.loc[df_sch["students"].idxmax()]
print(max_students_name)

print(f"\nSchool:", max_students_name["school"])
print(f"Number of Students:", max_students_name["students"])

"""7. What is the mean of the expenditure of the schools in the Tulare county?"""

tulare_expenditure = df_sch[df_sch["county"]=="Tulare"]["expenditure"].mean()

print(f"Mean expenditure in tulare is ${tulare_expenditure.round(2)}")

"""8. Print a list of the first school with highest `score` by county and district."""

county_and_district = df_sch.sort_values("scores", ascending = False).groupby(['county', 'district']).first()
print(county_and_district[['school', 'scores']][:1])

"""9. Calculate the mean of the variables `scores` and `income` for the different counties."""

county_mean = df_sch.groupby('county')[['scores', 'income']].mean()
print("Mean of scores and income for different counties:\n")
print(county_mean.round(1))

"""10. Create a new variable called `ranking` based on the `scores` values. Show the first 5 schools with the highest and the 5 with lowest values. What is the income for those 10 schools? And the number of computers?"""

df_sch['ranking'] = df_sch['scores'].rank(ascending=False)

highest_rank = df_sch.nsmallest(5,"ranking")
lowest_rank = df_sch.nlargest(5,"ranking")

print("Top 5 schools with the highest ranking:")
print(highest_rank[['school', 'income', 'computer']])
print(f"\n\nTop 5 schools with the lowest ranking:")
print(lowest_rank[['school', 'income', 'computer']])

"""11. Calculate the max, min and mean of the variable `scores` for the different districts and counties."""

district_scores = df_sch.groupby('district')['scores'].agg(['max', 'min', 'mean'])
county_scores = df_sch.groupby('county')['scores'].agg(['max', 'min', 'mean'])

print(f"District scores:\n{district_scores}")
print(f"\nCounty scores:\n{county_scores}")

"""12. Calculate the max, min and mean of the variable `scores` for the different districts and counties."""

district_scores = df_sch.groupby('district')['scores'].agg(['max', 'min', 'mean'])
county_scores = df_sch.groupby('county')['scores'].agg(['max', 'min', 'mean'])

print(f"District scores:\n{district_scores}")
print(f"\nCounty scores:\n{county_scores}")

"""13. Create a MultiIndex DataFrame with the schools using the columns `school` and `county`. Stack this DataFrame. What is the Income of the first five schools? What are their names?

14. Group the DataFrame by Counties. For each County, sort the Dataframe using `scores` in descending together.
"""

sorted_scores = df_sch.groupby('county').apply(lambda x: x.sort_values(by='scores', ascending=False))
print("Grouping by Counties sorted by scores:\n")
print(sorted_scores)