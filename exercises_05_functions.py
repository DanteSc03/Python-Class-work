# -*- coding: utf-8 -*-
"""Exercises 05_Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yssrNFIoboxFpUgWvHsLaVNFxPn4ELDa

#Exercises using functions

**NOTE: Use the commands that we have seen in class up to now.**

1. Create a function named *good_job_order* that, given two input variables: a list of names, and a variable to choose ordering the names in alphabetical order or reverse alphabetical order, print the following messages (if list_names=['lola','patxi','nerea','xabier']):

~~~
The names are in alphabetical order: (or The names are in reverse alphabetical order:)

Good job, Lola!
Your performance in this subject has been amazing.

Good job, Nerea!
Your performance in this subject has been amazing.

Good job, Patxi!
Your performance in this subject has been amazing.

Good job, Xabier!
Your performance in this subject has been amazing.
~~~
"""

def good_job_order(list_names):
  print("The names are in alphabetical order: (or the names are in reverse alphabetical order:)\n")
  good_job = ["Good job, %s!"%name.title() for name in names]
  for g_job in good_job:
    print(g_job)
    print("Your performance in this subject has been amazing.\n")

names = ["lola", "patxi", "nerea","xabier"]
names = sorted(names)
good_job_order(names)

"""2. Sum calculator. Write a function that takes two numbers and adds them together. Make the function print a sentence that displays the two numbers and the result. Call the function with three different pairs of numbers."""

def sum_calculator(numbers):
  Sum = sum(numbers)
  for num in numbers:
    print(num)
  print(f"The sum of these two numbers is {sum}\n")

numbers = [23, 55]
sum_calculator(numbers)
numbers2= [33,67]
sum_calculator(numbers2)
numbers3=[99,10392304]
sum_calculator(numbers3)

"""3. Sum calculator 2. Write a function that takes a list of numbers and adds them together. Make the function print a sentence that displays all the numbers and the result. Call the function with a list of 10 numbers and show the result.

~~~
list_num=[2,3,4,5,45,67,890,324,3,10]
sum_calculator_2(list_num)
~~~
"""

def sum_calculator_2(numbers):
  Sum = sum(numbers)
  print(f"The list of numbers were {numbers}")
  print(f"The sum of these two numbers is {Sum}\n")

list_num = 2,3,4,5,45,67,890,324,3,10
sum_calculator_2(list_num)

"""4. Sum calculator 3. Write a function that takes a variable sequence of numbers and adds them together. Make the function print a sentence that displays all the numbers and the result. Prove with different combinations of numbers

~~~
sum_calculator_3(5,4,3,2,1)
sum_calculator_3(59,42,31,22,13,78,50,75)
sum_calculator_3(59,42,31,22,13,78,50,75,100,789,2345)
~~~
"""

def sum_calculator_3(numbers):
  Sum = sum(numbers)
  print(f"The list of numbers were {numbers}")
  print(f"The sum of these two numbers is {Sum}\n")

list_num = 5,4,3,2,1
sum_calculator_3(list_num)
list_num2 = 59,42,31,22,13,78,50,75
sum_calculator_3(list_num2)
list_num3 = 59,42,31,22,13,78,50,75,100,789,2345
sum_calculator_3(list_num3)

"""5. Write a function called miles_to_kms that takes miles as a parameter, converts it into kilometers and returns the result."""

def miles_to_kms(miles):
  KMS = miles/0.62
  KMS = round(KMS,2)
  print(f"{miles} corresponds to {KMS} kilometers\n")


miles_to_kms(1789)

"""6. Write a function called *is_divisable_by_17* that takes an integer as an parameter and returns whether it is divisible by 17 or not."""

def is_divisible_by_17(number):
  if number % 17 == 0:
    result = number/17
    print(f"The number {number} is in fact divisible by 17 and the result is {result}\n")
  else:
    print(f"Unfortunately the number {number} is not divisible by 17 :(\nPlease try again")

is_divisible_by_17(18)
is_divisible_by_17(17)

"""7. Create a function called *most_common_char* that takes a string as a argument and returns the most common character in that string."""

def most_common_char(characters):
  char_counts = {}
  for char in characters:
    char_counts[char] = char_counts.get(char,0)+1
  common_char = max(char_counts, key=char_counts.get)
  print(f"The most common character is {char}")

characters = ["a","a","a","a","v","e","f","w","e","t","g","s","a","e","f","g","t","e","s","d","g","e"]
most_common_char(characters)

"""8. Create a function that given a certain string, print the number of digits and the number of letters. You can use the following functions to check if a character is a letter (character.isalpha() gives TRUE if character is a letter) or a number (character.isdigit() gives TRUE if character is a digit, 0..9)."""

ch='A'
print(ch.isalpha())
print(ch.isdigit())

def count_digits_letters(list):
  num_letters= 0
  num_digits = 0
  for item in list:
    string = str(item)
    for char in string:
      if char.isalpha():
        num_letters += 1
      elif char.isdigit():
        num_digits += 1
  print(f"the number of characters is {num_letters} and the number of digits is {num_digits}")

text = ["a","a","a","a","v","e","f","w","e","t","g","s","a","e","f","g","t","e","s","d","g","e",1,2,3,5,5,6,4,4,3,1,2,3,4,5,56,6,6]
count_digits_letters(text)

"""9. Write a Python function called *word_frequency* that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequency of each word in the list."""

def word_frequency(listedwords):
  word_counts = {}
  for word in listedwords:
    word_counts[word] = word_counts.get(word,0) + 1
  print(f"The count of each word is {word_counts}")

listedwords = ["apple", "banana", "apple", "banana"]
word_frequency(listedwords)

"""10. Write a function called *is_valid_email*  that takes an email address as an argument and returns True/False depending on whether it is a valid email address.Check rules for a valid email:
 - Must contain at least 1 character before the at symbol
 - Must contain an @ symbol
 - Must have at-least 1 character after the @ symbol and before the period(.)
 - Must contain at least 1 character after the last period(.).
 - Maximum 256 characters
 - Must start with a letter or a number
"""

def is_valid_email(email):
  if len(email) > 256:
    return False

  if email.count("@") != 1:
    return False

  before, after = email.split("@")
  if not before or not after:
    return False

  if not (before[0].isalpha()) or (before[0].isdigit()):
    return False

  if "." not in after:
    return False

  afterending = after.split(".")

  if " " in afterending:
    return False

  else:
    print("TRUE")
    '''Putting true here to allow the function to be called to both emails down below. If it wasn't for this I would've just put return True. Ordered from least to most restrictive'''

email = "example@example.com"
is_valid_email(email)
emailfalse = "example.com3"
is_valid_email(emailfalse)