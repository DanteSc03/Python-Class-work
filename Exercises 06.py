# -*- coding: utf-8 -*-
"""Exercises 06_Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mOO6rf3TVUSxC82Qrqm_D7FAxpYa9dYy

#Exercises with Numpy

**NOTE: Use the commands that we have seen in class up to now.**

1. Create an array of increasing numbers 1...n, where n is 20.  The array must have 4 rows and 5 columns. Reshape the array to have 5 rows and 4 columns.
"""

import numpy as np
Array = np.arange(1,21).reshape(4,5)

reshaped = Array.reshape(5,4)

print(f"Original Array:\n {Array}\n")
print(f"Reshaped array:\n{reshaped}")

"""2. Create a function that given an array representing a square matrix of 4 by 4 (4 rows and four columns), print the standard deviation and the mean of the array. And as output, it gives back the same array but with the elements of the main diagonal increased in 5."""

import numpy as np
def matrix_analyze(matrix):
  mean = np.mean(matrix)
  std = np.std(matrix)
  np.fill_diagonal(matrix, matrix.diagonal()+5)
  print(f"mean\n{mean}\n")
  print(f"standard deviation\n{std}\n")
  print(f"modified matrix\n{matrix}")

matrix = np.array([[1,2,3,4], [1,2,3,4],[1,2,3,4],[1,2,3,4]])
matrix_analyze(matrix)

"""3. Create a function that given as input an integer number n, simulates  rolling n dices at once 10 times (hint, use the random function), and as output print the results. You can make use of the [different functions provided by NumPy for randomization](https://docs.scipy.org/doc/numpy/reference/routines.random.html)."""

def dice_roll(n):
  for _ in range (10):
    rolls = np.random.randint (1,7, size =n)
    print("Rolls", rolls)

dice_roll(3)

"""4. Create an array of 50x50  with random values and find the maximum and the minimum values and their positions in the array. Print both, the max and min values and their positions."""

array = np.random.rand(50,50)
max = np.max(array)
min = np.min(array)
max_position = np.unravel_index(np.argmax(array), array.shape)
min_position = np.unravel_index(np.argmin(array), array.shape)

print(f"Max Value: {max}\n")
print(f"Max Position: {max_position}\n")
print(f"Min Value: {min}\n")
print(f"Min Position: {min_position}")

"""5. Create an array 10x10 with ones in the edges and zeros inside."""

array = np.ones((10,10))
array[1:-1, 1:-1]=0
print(array)

"""6. Define a function having as input an integer number n, that gives back as output an array of nxn with ones in the edges and zeros inside. Call the function three different times using n=5, 10 and 20"""

def create(n):
  array = np.ones((n,n))
  array[1:-1, 1:-1]=0
  print(array)

create(5)
create(10)
create(20)

"""7. Given two arrays, find the positions where elements of both arrays match. Use for example:
~~~
a=np.array([1,3,4,7,4,6,9])
b=np.array([2,5,4,6,9,11,1])
~~~
"""

a=np.array([1,3,4,7,4,6,9])
b=np.array([2,5,4,6,9,11,1])
matching = np.where(a==b)[0]
print(f"Positions where equal {matching}")

"""8. 'HousePrices.csv' is a dataset og house prices in the City of Windsor, Canada
This dataframe contains the sales prices of houses sold in the city of Windsor, Canada, during July, August and September, 1987.
It contains several variables (columns) in order:
 - rownames: column 0, number of row.
 - price: Sale price of a house, column 1.
 - lotsize: Lot size of a property in square feet, column 2.
 - bedrooms: Number of bedrooms, column 3.
 - bathrooms: Number of full bathrooms, column 4.
 - stories: Number of stories excluding basement, column 5.
 - driveway: Factor(object data type). Does the house have a driveway?, column 6.
 - recreation: Factor(object data type). Does the house have a recreational room?, column 7.
 - fullbase: Factor(object data type). Does the house have a full finished basement?, column 8.
 - gasheat: Factor(object data type). Does the house use gas for hot water heating?, column 9.
 - aircon: Factor(object data type). Is there central air conditioning?, column 10.
 - garage: Number of garage places, column 11.
 - prefer: Factor (object data type). Is the house located in the preferred neighborhood of the city?, column 12.

 Using the function np.genfromtxt, load the csv file as a numpy, without the header and selecting only columns 1,2,3,4,5 and 12. Remember to transform the prefer factor (column 12) to number. Print the average price of the houses with the maximum number of bedrooms.


"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab\ Notebooks/
!ls

houses_data = np.genfromtxt('HousePrices.csv', delimiter = ",", skip_header=True, usecols=(1,2,3,4,5,12))
prefer_column = houses_data[:, -1]
prefer_column_numeric = np.where(prefer_column == 'yes', 1, 0)
houses_data[:, -1] = prefer_column_numeric.astype(int)

max_beds = np.max(houses_data[:,2])
avg_price = np.mean(houses_data[houses_data[:,2] == max_beds][:,0])

print(f"Average price: {avg_price}")

"""9. What is the maximum price of the houses in the dataset?"""

max_price = np.max(houses_data[:,0])
print(f"Maximum prices of the houses is {max_price}")

"""10. Using the ttest_ind function, calculate the p_value at a significance value of 0.05 between the prices of the houses in the preferred neihgborhood and the rest ones. Are the means of the prices between houses in and out of the preferred neighborhood significantly different? Hint: use equal_var=false to compare samples of different sizes: t, p = ttest_ind(a, b, equal_var=False)"""

from scipy.stats import ttest_ind

preferred_neighborhood_prices = houses_data[np.where(houses_data[:, -1] == 1),0]
other_neighborhood_prices = houses_data[np.where(houses_data[:, -1] == 0),0]

T, p_value = ttest_ind(preferred_neighborhood_prices, other_neighborhood_prices, equal_var=False, axis=1)
alpha = 0.05
if p_value < alpha:
    print("Reject the null hypothesis; there is a significant difference between the house prices.")
else:
    print("Fail to reject the null hypothesis; there is no significant difference between the house prices.")
